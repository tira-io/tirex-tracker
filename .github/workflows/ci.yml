name: CI

on:
  push:

permissions: {}

concurrency:
  group: ${{ github.actor }}-${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  c-build-library:
    name: üèóÔ∏è Build C library
    strategy:
      matrix:
        runs-on:
          - ubuntu-22.04
          # - ubuntu-24.04 # FIXME: Re-enable
          # - macos-13
          - macos-14
          # - macos-15 # FIXME: Re-enable
          # - windows-2019 # FIXME: Re-enable
          - windows-2022
          # - windows-2025 # FIXME: Re-enable
        compiler:
          - gcc-13
          - gcc-14
          - clang-19.1.0
        exclude:
          # FIXME: Fix these exclusions if possible, and re-include them.
          - runs-on: ubuntu-22.04
            compiler: gcc-14 # Cannot be installed.
          - runs-on: macos-13
            compiler: gcc-13 # Fails at: /Users/runner/work/tirex-tracker/tirex-tracker/c/build/_deps/cpuinfo-src/src/api.c:6
          - runs-on: macos-13
            compiler: gcc-14 # Fails at: /Users/runner/work/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats_macos.cpp:11
          - runs-on: macos-13
            compiler: clang-19.1.0 # Fails with: dyld[4109]: Symbol not found: __ZTVN10__cxxabiv117__class_type_infoE
          - runs-on: macos-14
            compiler: gcc-13 # Fails at: /Users/runner/work/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats_macos.cpp:8
          - runs-on: macos-14
            compiler: clang-19.1.0 # Fails with: dyld[4109]: Symbol not found: __ZTVN10__cxxabiv117__class_type_infoE
          - runs-on: macos-15
            compiler: clang-19.1.0 # Fails with: dyld[4109]: Symbol not found: __ZTVN10__cxxabiv117__class_type_infoE
          - runs-on: windows-2019
            compiler: gcc-13 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2019
            compiler: gcc-14 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2019
            compiler: clang-19.1.0 # Build fails.
          - runs-on: windows-2022
            compiler: gcc-13 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2022
            compiler: gcc-14 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2025
            compiler: gcc-13 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2025
            compiler: gcc-14 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install compiler
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: "3.31.6"
          setup-cpp: false
      - name: üîß Configure CMake
        run: cmake -S c/ -B c/build/ -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=${{ env.CC }} -D CMAKE_CXX_COMPILER=${{ env.CXX }} -D BUILD_SHARED_LIBS=NO -D TIREX_TRACKER_BUILD_DOCS=NO -D TIREX_TRACKER_BUILD_DEB=NO -D TIREX_TRACKER_BUILD_EXAMPLES=NO
      - name: üèóÔ∏è Build library
        run: cmake --build c/build/ --config Release --target tirex_tracker_full
      - name: üì§ Upload Linux library
        if: matrix.runs-on == 'ubuntu-22.04' && matrix.compiler == 'clang-19.1.0'
        uses: actions/upload-artifact@v4
        with:
          name: c-library-linux
          path: c/build/extensions/libtirex_tracker_full.so
      - name: üì§ Upload macOS library
        if: matrix.runs-on == 'macos-14' && matrix.compiler == 'gcc-14'
        uses: actions/upload-artifact@v4
        with:
          name: c-library-macos
          path: c/build/extensions/libtirex_tracker_full.dylib
      - name: üì§ Upload Windows library
        if: matrix.runs-on == 'windows-2022' && matrix.compiler == 'clang-19.1.0'
        uses: actions/upload-artifact@v4
        with:
          name: c-library-windows
          path: c/build/extensions/Release/tirex_tracker_full.dll
  c-check-format:
    name: üîç Check C code format
    runs-on: ubuntu-22.04
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install compiler
        uses: aminya/setup-cpp@v1
        with:
          clang-format: "19.1.0"
          setup-cpp: false
      - name: üîç Check Codestyle
        working-directory: ${{github.workspace}}/c/
        run: find src/ include/ -type f -iregex '^.*\.\(c\|h\|cpp\|hpp\|cc\|hh\)$' | xargs clang-format-19 --dry-run --Werror --Wno-error=unknown
  c-build-cli:
    name: üèóÔ∏è Build C CLI
    strategy:
      matrix:
        runs-on:
          - ubuntu-22.04
          # - ubuntu-24.04 # FIXME: Re-enable
          # - macos-13
          - macos-14
          # - macos-15 # FIXME: Re-enable
          # - windows-2019 # FIXME: Re-enable
          - windows-2022
          # - windows-2025 # FIXME: Re-enable
        compiler:
          - gcc-13
          - gcc-14
          - clang-19.1.0
        exclude:
          # FIXME: Fix these exclusions if possible, and re-include them.
          - runs-on: ubuntu-22.04
            compiler: gcc-14 # Cannot be installed.
          - runs-on: macos-13
            compiler: gcc-13 # Fails at: /Users/runner/work/tirex-tracker/tirex-tracker/c/build/_deps/cpuinfo-src/src/api.c:6
          - runs-on: macos-13
            compiler: gcc-14 # Fails at: /Users/runner/work/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats_macos.cpp:11
          - runs-on: macos-13
            compiler: clang-19.1.0 # Fails with: dyld[4109]: Symbol not found: __ZTVN10__cxxabiv117__class_type_infoE
          - runs-on: macos-14
            compiler: gcc-13 # Fails at: /Users/runner/work/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats_macos.cpp:8
          - runs-on: macos-14
            compiler: clang-19.1.0 # Fails with: dyld[4109]: Symbol not found: __ZTVN10__cxxabiv117__class_type_infoE
          - runs-on: macos-15
            compiler: clang-19.1.0 # Fails with: dyld[4109]: Symbol not found: __ZTVN10__cxxabiv117__class_type_infoE
          - runs-on: windows-2019
            compiler: gcc-13 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2019
            compiler: gcc-14 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2019
            compiler: clang-19.1.0 # Build fails.
          - runs-on: windows-2022
            compiler: gcc-13 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2022
            compiler: gcc-14 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2025
            compiler: gcc-13 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
          - runs-on: windows-2025
            compiler: gcc-14 # Fails with: Error: D:/a/tirex-tracker/tirex-tracker/c/src/measure/stats/systemstats.cpp:386:35: error: 'getProcessorMinMaxFreq' was not declared in this scope
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install compiler
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: "3.31.6"
          setup-cpp: false
      - name: üîß Configure CMake
        run: |
          cmake -S c/ -B c/build/ -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=${{ env.CC }} -D CMAKE_CXX_COMPILER=${{ env.CXX }} -D BUILD_SHARED_LIBS=NO -D TIREX_TRACKER_BUILD_DOCS=NO -D TIREX_TRACKER_BUILD_DEB=NO -D TIREX_TRACKER_BUILD_EXAMPLES=YES
      - name: üèóÔ∏è Build CLI
        run: cmake --build c/build/ --config Release --target measure
      - name: üì§ Upload Linux CLI
        if: matrix.runs-on == 'ubuntu-22.04' && matrix.compiler == 'clang-19.1.0'
        uses: actions/upload-artifact@v4
        with:
          name: c-cli-linux
          path: c/build/examples/03_measure_command/measure
      - name: üì§ Upload macOS CLI
        if: matrix.runs-on == 'macos-14' && matrix.compiler == 'gcc-14'
        uses: actions/upload-artifact@v4
        with:
          name: c-cli-macos
          path: c/build/examples/03_measure_command/measure
      - name: üì§ Upload Windows CLI
        if: matrix.runs-on == 'windows-2022' && matrix.compiler == 'clang-19.1.0'
        uses: actions/upload-artifact@v4
        with:
          name: c-cli-windows
          path: c/build/examples/03_measure_command/Release/measure.exe
  c-build-debian-package:
    name: üèóÔ∏è Build Debian package
    strategy:
      matrix:
        runs-on:
          - ubuntu-22.04
          - ubuntu-24.04
        compiler:
          - gcc-13
          - gcc-14
          - clang-19.1.0
        exclude:
          # FIXME: Fix these exclusions if possible, and re-include them.
          - runs-on: ubuntu-22.04
            compiler: gcc-14 # Cannot be installed.
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install compiler
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
      - name: üîß Configure CMake
        run: |
          cmake -S c/ -B c/build/ -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=${{ env.CC }} -D CMAKE_CXX_COMPILER=${{ env.CXX }} -D LLVM_ENABLE_ZLIB=OFF -D LLVM_ENABLE_ZSTD=OFF -D BUILD_SHARED_LIBS=NO -D TIREX_TRACKER_BUILD_DOCS=NO -D TIREX_TRACKER_BUILD_DEB=YES -D TIREX_TRACKER_BUILD_EXAMPLES=NO
      - name: üèóÔ∏è Build Debian package
        run: cmake --build c/build/ --config Release --target package
      - name: üì§ Upload Debian package
        if: matrix.runs-on == 'ubuntu-22.04' && matrix.compiler == 'clang-19.1.0'
        uses: actions/upload-artifact@v4
        with:
          name: c-debian-package
          path: c/build/tirex-tracker-*-Linux.deb
  jvm-build:
    name: üèóÔ∏è Build JVM library
    strategy:
      matrix:
        java: # Java LTS versions
          - "8"
          - "11"
          - "17"
          - "21"
    runs-on: ubuntu-22.04
    needs:
      - c-build-library
      - c-check-format
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install JDK 8 (for compiling)
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: üß∞ Install JDK (for checks)
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: jvm/library/src/main/resources/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: jvm/library/src/main/resources/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: jvm/library/src/main/resources/
      - name: üèóÔ∏è Build project
        run: jvm/gradlew --project-dir jvm/ build
  jvm-check:
    name: üß™ Test and check JVM library
    strategy:
      matrix:
        java: # Java LTS versions
          - "8"
          - "11"
          - "17"
          - "21"
        runs-on:
          - ubuntu-22.04
          # - ubuntu-24.04 # FIXME: Re-enable
          # - macos-13
          # - macos-14 # FIXME: JDK 8 cannot be installed.
          # - macos-15 # FIXME: JDK 8 cannot be installed.
          # - windows-2019 # FIXME: Re-enable
          - windows-2022
          # - windows-2025 # FIXME: Re-enable
        exclude:
          - java: "8"  # FIXME: Gradle seems to insist on loading Java 17 weirdly.
            runs-on: windows-2022
          - java: "11"  # FIXME: Gradle seems to insist on loading Java 17 weirdly.
            runs-on: windows-2022
    runs-on: ${{ matrix.runs-on }}
    needs:
      - c-build-library
      - c-check-format
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install JDK 8 (for compiling)
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: üß∞ Install JDK (for checks)
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: jvm/library/src/main/resources/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: jvm/library/src/main/resources/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: jvm/library/src/main/resources/
      - name: üß™ Test and check with Gradle
        run: jvm/gradlew --project-dir jvm/ check
  jvm-publish:
    name: üöÄ Publish JVM library to GitHub Packages
    strategy:
      matrix:
        java: # Java LTS versions
          - "8"
          - "11"
          - "17"
          - "21"
    if: github.event_name == 'push' && endsWith(github.event.base_ref, 'master') && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-22.04
    needs:
      - c-build-library
      - c-check-format
      - jvm-build
      - jvm-check
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install JDK 8 (for compiling)
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: üß∞ Install JDK (for checks)
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: jvm/library/src/main/resources/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: jvm/library/src/main/resources/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: jvm/library/src/main/resources/
      - name: üöÄ Publish JVM library to Maven Local
        run: jvm/gradlew --project-dir jvm/ publishToMavenLocal
      - name: üì§ Upload JVM JAR
        if: matrix.java == '21'
        uses: actions/upload-artifact@v4
        with:
          name: jvm-jar
          path: ~/.m2/repository/io/tira/tirex-tracker/*/tirex-tracker-*.jar
      - name: üöÄ Publish JVM library to GitHub Packages
        if: matrix.java == '21'
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: jvm/gradlew --project-dir jvm/ publishAllPublicationsToGitHubPackagesRepository
  python-build:
    name: üèóÔ∏è Build Python wheels
    strategy:
      matrix:
        python:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ubuntu-22.04
    needs:
      - c-build-library
      - c-check-format
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: python/tirex_tracker/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: python/tirex_tracker/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: python/tirex_tracker/
      - name: üß∞ Install dependencies
        run: pip install build twine
      - name: üèóÔ∏è Build Python wheels
        run: python -m build python
      - name: üß™ Check package bundles
        run: twine check python/dist/*
      - name: üì§ Upload Python wheels
        if: matrix.python == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: python/dist/
  python-check:
    name: üîç Check Python code
    strategy:
      matrix:
        python:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ubuntu-22.04
    needs:
      - c-build-library
      - c-check-format
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: python/tirex_tracker/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: python/tirex_tracker/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: python/tirex_tracker/
      - name: üß∞ Install dependencies
        run: pip install -e python[tests]
      - name: üîç Check Python code
        run: ruff check python
  python-typing:
    name: üîç Check Python static typing
    strategy:
      matrix:
        python:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ubuntu-22.04
    needs:
      - c-build-library
      - c-check-format
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: python/tirex_tracker/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: python/tirex_tracker/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: python/tirex_tracker/
      - name: üß∞ Install dependencies
        run: pip install -e python[tests]
      - name: üîç Check Python static typing
        run: mypy python
  python-security:
    name: üîç Check Python code security
    strategy:
      matrix:
        python:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ubuntu-22.04
    needs:
      - c-build-library
      - c-check-format
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: python/tirex_tracker/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: python/tirex_tracker/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: python/tirex_tracker/
      - name: üß∞ Install dependencies
        run: pip install -e python[tests]
      - name: üîç Check Python code security
        run: bandit -c python/pyproject.toml -r python
  python-test:
    name: üß™ Test Python code
    strategy:
      matrix:
        python:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        runs-on:
          - ubuntu-22.04
          # - ubuntu-24.04 # FIXME: Re-enable
          # - macos-13
          - macos-14
          # - macos-15 # FIXME: Re-enable
          # - windows-2019 # FIXME: Re-enable
          - windows-2022
          # - windows-2025 # FIXME: Re-enable
    runs-on: ${{ matrix.runs-on }}
    needs:
      - c-build-library
      - c-check-format
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üß∞ Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: python/tirex_tracker/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: python/tirex_tracker/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: python/tirex_tracker/
      - name: üß∞ Install dependencies
        run: pip install -e python[tests]
      - name: üß™ Test Python code
        run: pytest --cov --cov-report xml python
      - name: üì§ Upload coverage to Codecov
        if: matrix.python == '3.13'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
  python-publish:
    name: üöÄ Publish Python wheels to PyPI
    if: github.event_name == 'push' && endsWith(github.event.base_ref, 'master') && startsWith(github.ref, 'refs/tags')
    needs:
      - c-build-library
      - c-check-format
      - python-build
      - python-check
      - python-typing
      - python-security
      - python-test
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üì• Download Python wheels
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: dist
      - name: üöÄ Publish Python wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
  github-release:
    name: üöÄ Create GitHub release
    if: github.event_name == 'push' && endsWith(github.event.base_ref, 'master') && startsWith(github.ref, 'refs/tags')
    needs:
      - c-build-library
      - c-check-format
      - c-build-cli
      - c-build-debian-package
      - jvm-build
      - jvm-check
      - jvm-publish
      - python-build
      - python-check
      - python-typing
      - python-security
      - python-test
      - python-publish
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: üì• Check-out
        uses: actions/checkout@v4
      - name: üì• Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-library-linux
          path: tmp/c/
      - name: üì• Download macOS library
        uses: actions/download-artifact@v4
        with:
          name: c-library-macos
          path: tmp/c/
      - name: üì• Download Windows library
        uses: actions/download-artifact@v4
        with:
          name: c-library-windows
          path: tmp/c/
      - name: üì• Download Linux CLI
        uses: actions/download-artifact@v4
        with:
          name: c-cli-linux
          path: tmp/c/
      - name: ‚úèÔ∏è Rename Linux CLI
        run: mv tmp/c/measure tmp/c/measure-${{ github.ref_name }}-linux
      - name: üì• Download macOS CLI
        uses: actions/download-artifact@v4
        with:
          name: c-cli-macos
          path: tmp/c/
      - name: ‚úèÔ∏è Rename macOS CLI
        run: mv tmp/c/measure tmp/c/measure-${{ github.ref_name }}-macos
      - name: üì• Download Windows CLI
        uses: actions/download-artifact@v4
        with:
          name: c-cli-windows
          path: tmp/c/
      - name: ‚úèÔ∏è Rename Windows CLI
        run: mv tmp/c/measure.exe tmp/c/measure-${{ github.ref_name }}-windows.exe
      - name: üì• Download Debian package
        uses: actions/download-artifact@v4
        with:
          name: c-debian-package
          path: tmp/c/
      - name: üì• Download Python wheels
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: tmp/python/dist/
      - name: üì• Download JVM JAR
        uses: actions/download-artifact@v4
        with:
          name: jvm-jar
          path: tmp/jvm/
      - name: üöÄ Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: |
            tmp/c/*.so
            tmp/c/*.dylib
            tmp/c/*.dll
            tmp/c/measure-*-linux
            tmp/c/measure-*-macos
            tmp/c/measure-*-windows.exe
            tmp/c/tirex-tracker-*-Linux.deb
            tmp/python/dist/*
            tmp/jvm/*/*.jar
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
          generate_release_notes: true
