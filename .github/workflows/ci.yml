name: CI

on:
  push:

permissions: {}

concurrency:
  group: ${{ github.actor }}-${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  c-build:
    name: 🏗️ Build Library and Command
    strategy:
      matrix:
        conf:
          - os: macos-latest
            artifacts: |
              c/build/extensions/libmeasure_full.dylib
              c/build/examples/03_measure_command/measure
          - os: windows-latest
            artifacts: |
              c\build\extensions\Release\measure_full.dll
              c\build\examples\03_measure_command\Release\measure.exe
    runs-on: ${{ matrix.conf.os }}
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🔧 Configure CMake
        run: cmake -S c/ -B c/build/ -D CMAKE_BUILD_TYPE=Release -D BUILD_SHARED_LIBS=NO -D TIREX_TRACKER_BUILD_DOCS=NO -D TIREX_TRACKER_BUILD_DEB=NO -D TIREX_TRACKER_BUILD_EXAMPLES=YES
      - name: 🏗️ Build binary
        run: cmake --build c/build/ --config Release --target measure_full measure
      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: c-binaries-${{ matrix.conf.os }}
          path: ${{ matrix.conf.artifacts }}
  c-build-on-docker:
    name: 🏗️ Build Library and Command using Docker
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    env:
      TZ: Europe/Berlin
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install Dependencies
        run: |
          apt-get update;
          apt-get install -y python3-pip git clang-18;
          pip3 install --upgrade cmake
      - name: 🔧 Configure CMake
        run: cmake -S c/ -B c/build/ -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang-18 -D CMAKE_CXX_COMPILER=clang++-18 -D BUILD_SHARED_LIBS=NO -D TIREX_TRACKER_BUILD_DOCS=NO -D TIREX_TRACKER_BUILD_DEB=YES -D TIREX_TRACKER_BUILD_EXAMPLES=YES
      - name: 🏗️ Build binary
        run: cmake --build c/build/ --config Release --target measure_full measure package
      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: c-binaries-linux
          path: |
            c/build/extensions/libmeasure_full.so
            c/build/examples/03_measure_command/measure
            c/build/tirex-tracker-*-Linux.deb
      
  c-build-linux-library:
    name: 🏗️ Build Linux library
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install compiler
        run: sudo apt-get install -y g++-13
      - name: 🔧 Configure CMake
        run: |
          cmake -S c/ -B c/build/ \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_C_COMPILER=gcc-13 \
          -D CMAKE_CXX_COMPILER=g++-13 \
          -D BUILD_SHARED_LIBS=NO \
          -D TIREX_TRACKER_BUILD_DOCS=NO \
          -D TIREX_TRACKER_BUILD_DEB=NO \
          -D TIREX_TRACKER_BUILD_EXAMPLES=NO
      - name: 🏗️ Build Linux binary
        run: cmake --build c/build/ --config Release --target measure_full
      - name: 📤 Upload Linux library
        uses: actions/upload-artifact@v4
        with:
          name: c-linux-library
          path: c/build/extensions/libmeasure_full.so
  c-build-linux-cli:
    name: 🏗️ Build Linux CLI
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install compiler
        run: sudo apt-get install -y g++-13
      - name: 🔧 Configure CMake
        run: |
          cmake -S c/ -B c/build/ \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_C_COMPILER=gcc-13 \
          -D CMAKE_CXX_COMPILER=g++-13 \
          -D BUILD_SHARED_LIBS=NO \
          -D TIREX_TRACKER_BUILD_DOCS=NO \
          -D TIREX_TRACKER_BUILD_DEB=NO \
          -D TIREX_TRACKER_BUILD_EXAMPLES=YES
      - name: 🏗️ Build Linux binary
        run: cmake --build c/build/ --config Release --target measure
      - name: 📤 Upload Linux CLI
        uses: actions/upload-artifact@v4
        with:
          name: c-linux-cli
          path: c/build/examples/03_measure_command/measure
  c-build-debian-package:
    name: 🏗️ Build Debian package
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install compiler
        run: sudo apt-get install -y g++-13
      - name: 🔧 Configure CMake
        run: |
          cmake -S c/ -B c/build/ \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_C_COMPILER=gcc-13 \
          -D CMAKE_CXX_COMPILER=g++-13 \
          -D BUILD_SHARED_LIBS=NO \
          -D TIREX_TRACKER_BUILD_DOCS=NO \
          -D TIREX_TRACKER_BUILD_DEB=YES \
          -D TIREX_TRACKER_BUILD_EXAMPLES=NO
      - name: 🏗️ Build Debian package
        run: cmake --build c/build/ --config Release --target package
      - name: 📤 Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: c-debian-package
          path: c/build/tirex-tracker-*-Linux.deb
  c-linter:
    name: 🔍 Check C Code
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install Dependencies
        run: sudo apt-get -y install clang-format-19
      - name: 🔍 Check Codestyle
        working-directory: ${{github.workspace}}/c/
        run: find src/ include/ -type f -iregex '^.*\.\(c\|h\|cpp\|hpp\|cc\|hh\)$' | xargs clang-format-19 --dry-run --Werror --Wno-error=unknown
  jvm-build:
    name: 🏗️ Build JVM library
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install JDK
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: jvm/library/src/main/resources/
      - name: 🏗️ Build project
        run: jvm/gradlew --project-dir jvm/ build
      - name: 🏗️ Build JAR
        run: jvm/gradlew --project-dir jvm/ publishToMavenLocal
      - name: 📤 Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: jvm-jar
          path: ~/.m2/repository/io/tira/tirex-tracker/*/tirex-tracker-*.jar
  jvm-test:
    name: 🧪 Test JVM library
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install JDK
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: jvm/library/src/main/resources/
      - name: 🧪 Test with Gradle
        run: jvm/gradlew --project-dir jvm/ test
  jvm-publish:
    name: 🚀 Publish JVM library to GitHub Packages
    if: github.event_name == 'push' && endsWith(github.event.base_ref, 'master') && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
      - jvm-build
      - jvm-test
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install JDK
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin
          cache: gradle
          cache-dependency-path: |
            jvm/example/build.gradle.kts
            jvm/library/build.gradle.kts
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: jvm/library/src/main/resources/
      - name: 🚀 Publish JVM library to GitHub Packages
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: jvm/gradlew --project-dir jvm/ publishAllPublicationsToGitHubPackagesRepository
  python-build:
    name: 🏗️ Build Python wheels
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: python/tirex_tracker/
      - name: 🧰 Install dependencies
        run: pip install build twine
      - name: 🏗️ Build Python wheels
        run: python -m build python
      - name: 🧪 Check package bundles
        run: twine check python/dist/*
      - name: 📤 Upload Python wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: python/dist/
  python-check:
    name: 🔍 Check Python code
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: python/tirex_tracker/
      - name: 🧰 Install dependencies
        run: pip install -e python[tests]
      - name: 🔍 Check Python code
        run: ruff check python
  python-typing:
    name: 🔍 Check Python static typing
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: python/tirex_tracker/
      - name: 🧰 Install dependencies
        run: pip install -e python[tests]
      - name: 🔍 Check Python static typing
        run: mypy python
  python-security:
    name: 🔍 Check Python code security
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: python/tirex_tracker/
      - name: 🧰 Install dependencies
        run: pip install -e python[tests]
      - name: 🔍 Check Python code security
        run: bandit -c python/pyproject.toml -r python
  python-test:
    name: 🧪 Test Python code
    runs-on: ubuntu-latest
    needs: 
      - c-build-linux-library
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 🧰 Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: python/pyproject.toml
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: python/tirex_tracker/
      - name: 🧰 Install dependencies
        run: pip install -e python[tests]
      - name: 🧪 Test Python code
        run: pytest --cov --cov-report xml python
      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
  python-publish:
    name: 🚀 Publish Python wheels to PyPI
    if: github.event_name == 'push' && endsWith(github.event.base_ref, 'master') && startsWith(github.ref, 'refs/tags')
    needs:
    - python-build
    - python-check
    - python-typing
    - python-security
    - python-test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - name: 📥 Check-out
      uses: actions/checkout@v4
    - name: 📥 Download Python wheels
      uses: actions/download-artifact@v4
      with:
        name: python-wheels
        path: dist
    - name: 🚀 Publish Python wheels to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
  github-release:
    name: 🚀 Create GitHub release
    if: github.event_name == 'push' && endsWith(github.event.base_ref, 'master') && startsWith(github.ref, 'refs/tags')
    needs:
      - c-build-linux-library
      - c-build-linux-cli
      - c-build-debian-package
      - jvm-build
      - jvm-test
      - python-build
      - python-check
      - python-typing
      - python-security
      - python-test
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Check-out
        uses: actions/checkout@v4
      - name: 📥 Download Linux library
        uses: actions/download-artifact@v4
        with:
          name: c-linux-library
          path: tmp/c/
      - name: 📥 Download Linux CLI
        uses: actions/download-artifact@v4
        with:
          name: c-linux-cli
          path: tmp/c/
      - name: 📥 Download Debian package
        uses: actions/download-artifact@v4
        with:
          name: c-debian-package
          path: tmp/c/
      - name: 📥 Download Python wheels
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: tmp/python/dist/
      - name: 📥 Download JVM JAR
        uses: actions/download-artifact@v4
        with:
          name: jvm-jar
          path: tmp/jvm/
      - name: 🚀 Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: |
            tmp/c/measure_full.so
            tmp/c/measure
            tmp/c/tirex-tracker-*-Linux.deb
            tmp/python/dist/*
            tmp/jvm/*/*.jar
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
          generate_release_notes: true